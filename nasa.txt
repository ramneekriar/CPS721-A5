% -------------------------------------
%      COMPUTER SPECIFICATIONS
% --------------------------------------

OS: macOS Monterey
MACBOOK: Macbook Air (13-inch, 2020)
CPU: Apple M1 Chip
MEMORY: 16 GB LPDDR4
GRAPHICS: Apple M1 Built-in GPU 7 Cores

% -------------------------------------
%      WITHOUT HEURISTICS
% --------------------------------------
?- solve_problem(L, 15).
L = [takeImage(tool2, sat1, spectr, andromeda), turnTo(sat1, ground17, andromeda), takeImage(tool1, sat1, therm, comet2), turnTo(sat1, andromeda, comet2), runCalibrateProc(tool2, sat1, ground17), turnTo(sat1, andromeda, ground17), runCalibrateProc(tool1, sat1, ground17), turnTo(sat1, andromeda, ground17), up(tool2, sat1), up(tool1, sat1)]
Yes (582.50s cpu, solution 1, maybe more)

Without heuristics, the Prolog program explores all branches before it successfully arives at the goal_state. For example, it might explore a branch such as turnning to stations other than the ground station.

As a result, due to there being no useless statements it increases the time the program takes to run and execute the given planning problem.

% -------------------------------------
%      WITH HEURISTICS
% --------------------------------------
?- solve_problem(L, 15).
L = [takeImage(tool2, sat1, spectr, andromeda), takeImage(tool1, sat1, therm, comet2), turnTo(sat1, ground17, andromeda), runCalibrateProc(tool2, sat1, ground17), turnTo(sat1, andromeda, comet2), runCalibrateProc(tool1, sat1, ground17), turnTo(sat1, andromeda, ground17), up(tool2, sat1), up(tool1, sat1)]
Yes (32.33s cpu, solution 1, maybe more)

With the addition of heuristics, the Prolog program can pre-maturely stop a branch that we deem unnecessary to explore. For example, it is useless to turn off/turn on an instrument which has just been turned on/off, to take an image of the same thing twice, and to turn to a station that isn't the ground station.

These are a few useless scenarios and by implementing them, we cut off branches significantly which in turn reduces the time spent to run and execute the planning problem, as the goal_state is reached faster because of efficient traversal of the graph.